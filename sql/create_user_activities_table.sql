-- Create user_activities table
CREATE TABLE IF NOT EXISTS public.user_activities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    activity_type TEXT NOT NULL,
    points_earned INTEGER NOT NULL,
    metadata JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Add index for better query performance
CREATE INDEX IF NOT EXISTS idx_user_activities_user_id ON public.user_activities(user_id);
CREATE INDEX IF NOT EXISTS idx_user_activities_created_at ON public.user_activities(created_at);

-- Enable Row Level Security
ALTER TABLE public.user_activities ENABLE ROW LEVEL SECURITY;

-- Create policies for Row Level Security
CREATE POLICY "Enable read access for users to their own activities" 
ON public.user_activities
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Enable insert for authenticated users"
ON public.user_activities
FOR INSERT
TO authenticated
WITH CHECK (true);

-- Grant necessary permissions
GRANT SELECT, INSERT ON public.user_activities TO authenticated;

-- Add comment to the table
COMMENT ON TABLE public.user_activities IS 'Tracks user activities and points earned';

-- Add comments to columns
COMMENT ON COLUMN public.user_activities.user_id IS 'Reference to the user who performed the activity';
COMMENT ON COLUMN public.user_activities.activity_type IS 'Type of activity (e.g., document_upload, document_verified, etc.)';
COMMENT ON COLUMN public.user_activities.points_earned IS 'Number of points earned for this activity';
COMMENT ON COLUMN public.user_activities.metadata IS 'Additional data related to the activity';
COMMENT ON COLUMN public.user_activities.created_at IS 'Timestamp when the activity was recorded';
